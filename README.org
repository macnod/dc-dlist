#+title: DC-DLIST
 * [[#overview][Overview]]
 * [[#function-reference][Function Reference]]
   * [[#at][at]]
   * [[#copy][copy]]
   * [[#delete-node][delete-node]]
   * [[#delete-node-at][delete-node-at]]
   * [[#find-first-node][find-first-node]]
   * [[#from-list][from-list]]
   * [[#insert-before-node][insert-before-node]]
   * [[#node-at][node-at]]
   * [[#peek-head][peek-head]]
   * [[#peek-tail][peek-tail]]
   * [[#pop-head][pop-head]]
   * [[#pop-tail][pop-tail]]
   * [[#push-head][push-head]]
   * [[#push-tail][push-tail]]
   * [[#to-list][to-list]]


* Overview
The DC-DLIST package provides a simple, doubly-linked list via the
=dlist= and =dlist-node= classes.  Here are some examples of how to use
dlists:

#+begin_src lisp
(let ((dlist (make-instance 'dlist)))
  (push-tail dlist 3)
  (push-tail dlist 4)
  (push-tail dlist 5)
  (push-head dlist 2)
  (push-head dlist 1)
  (push-head dlist 0)
  (list :list (to-list dlist)
        :head (peek-head dlist)
        :tail (peek-tail dlist)
        :len (len dlist)))
;; (:list (0 1 2 3 4 5) :head 0 :tail 5 :len 6)

(let ((dlist (from-list '(1 2 3))))
  (pop-head dlist)
  (pop-tail dlist)
  (list :list (to-list dlist)
        :head (peek-head dlist)
        :tail (peek-tail dlist)
        :len (len dlist)))
;; (:list (2) :head 2 :tail 2 :len 1)

(let* ((dlist (from-list '(1 2 3 4)))
       (node (node-at dlist 1)))
  (delete-node-at dlist 2) ;; delete the node with value 3
  (delete-node dlist node) ;; deletet he node with value 2
  (list :list (to-list dlist)
        :head (peek-head dlist)
        :tail (peek-tail dlist)
        :len (len dlist)))
;; (:list (1 4) :head 1 :tail 4 :len 2)

#+end_src

* Function Reference
** at
   =(at dlist index)=
*** Synopsis
    Returns the value associated with the node at the given index.  For example,
    if you have a dlist called =d= with the values =(1 2 3)= and you call
    =(at d 0)=, you'll get the value 1.
*** Parameters
**** dlist
     An object of type dlist.
**** index
     An integer that is a zero-based index to the node in dlist.
*** Details
    If the index you provide is outside of the range of the dlist, this function
    returns the value =nil=.  If the dlist object is not a dlist or if the index
    is not a number, the call generates an error.  If the index is a number that
    can't evaluate to an integer, then the function returns =nil=.
** copy
   =(copy dlist)=
*** Synopsis
    Returns a copy of the dlist.  For example, to get a copy of dlist =a= called
    =b=, you can use the code like =(let ((b (copy a))) ...=.
*** Parameters
**** dlist
     An object of type dlist.
*** Details
    This function creates a whole new copy of the original dlist, such that if 
    you delete a node from the original dlist, the copy is not affected.
    However, the function does not create deep copies of the values associated
    with the original nodes.  If you're values are objects, then the new list
    contains references to to same objects that the original list referenced.
** delete-node
   =(delete-node dlist dlist-node)=
*** Synopsis
    Deletes the given dlist-node from dlist and returns the value associated
    with the deleted node.
    #+begin_src lisp
    (let* ((dlist (from-list '(1 2 3)))
           (node (node-at dlist 1))) ;; The node with the value 2
      (delete-node dlist node)
      (list :list (to-list dlist)))
    ;; (:list (1 3))
    #+end_src
*** Parameters
**** dlist
     An object of type dlist.
**** dlist-node
     An object of type dlist-node.
*** Details
    If =dlist-node= doesn't exist in =dlist=, this function returns nil.
** delete-node-at
   =(delete-node-at dlist index)=
*** Synopsis
    Deletes the node at the given index from dlist and returns value associated
    with the deleted node.
    #+begin_src lisp
    (let ((dlist (from-list '(1 2 3))))
      (delete-node-at dlist 1)
      (list :list (to-list dlist)))
    ;; (:list 1 3)
    #+end_src
*** Parameters
**** dlist
     An object of type dlist.
**** index
     A zero-based index to the dlist-node object to be deleted in dlist.
*** Details
    If the index is out of range, this function deletes nothing and returns nil.
** find-first-node
   =(find-first-node dlist value)=
   Finds and returns the first node in dlist that has a value that is equal to 
   the given value.  If no such node is found, this function returns nil.
*** Parameters
**** dlist
     An object of type dlist.
**** value
     Any object that can be compared with the value of a node using =equal=.
*** Details
    This function returns a node, not a value.  To obtain the value from the 
    node, you can use the =value= function.
** from-list
   =(from-list some-list)=
   Returns a dlist object that contains nodes with the values in the given list.
*** Parameters
**** some-list
     A standard Common Lisp list containing any values.
*** Details
    This function creates a new dlist object, then iterates through the given list
    calling the =push-tail= method to add each element to the dlist.  The function
    returns the new dlist.  The list you provide can be empty, in which case this
    function retruns an empty dlist, which is equivalent to calling
    =(make-instance 'dlist)=.
** insert-before-node
** node-at
** peek-head 
** peek-tail 
** pop-head 
** pop-tail 
** push-head 
** push-tail 
** to-list
